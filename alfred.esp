substitutions:
  # This is the name of the device, it will be used as Network Name
  name: tc14
  # This is the friendly name of the device, it will be used in Home Assistant
  friendly_name: tc14
  #Change this to your Home Assistant IP address
  ip_address_HA: 192.168.5.45

  # !secret wifi_ssid
  # !secret wifi_password
  # !secret wifi_domain

  # !secret enctryption_key_vaa
  # !secret ota_password_vaa

  ###

  # 07-22
  day_brightness: "70"
  day_volume: "70"
  # 22-07
  night_brightness: "30"
  night_volume: "30"

  ###

  VERSION: '0.0.1'

  image_error_no_wifi: http://${ip_address_HA}:8123/local/images/error-no-wifi.png
  image_error_no_ha: http://${ip_address_HA}:8123/local/images/error-no-ha.png
  image_error: http://${ip_address_HA}:8123/local/images/error.png
  image_idle: http://${ip_address_HA}:8123/local/images/idle.png
  image_listening: http://${ip_address_HA}:8123/local/images/listening.png
  image_loading: http://${ip_address_HA}:8123/local/images/loading.png
  image_muted: http://${ip_address_HA}:8123/local/images/muted.png
  image_replying: http://${ip_address_HA}:8123/local/images/replying.png
  image_settings: http://${ip_address_HA}:8123/local/images/settings.png
  image_thinking: http://${ip_address_HA}:8123/local/images/thinking.png
  image_timer_finished: http://${ip_address_HA}:8123/local/images/timer_finished.png

  sound_error: http://${ip_address_HA}:8123/local/sounds/error.mp3
  sound_success: http://${ip_address_HA}:8123/local/sounds/success.mp3
  sound_timer_finished: http://${ip_address_HA}:8123/local/sounds/zoot_chest_long.mp3
  sound_wakeword: http://${ip_address_HA}:8123/local/sounds/wakeword.mp3

  background_light: "F9F9F9"
  background_dark: "212121"

  font_color: "FFB74D"
  font_main: Ubuntu
  font_mono: Ubuntu Mono
  font_allowed_characters: " !#$%&\"'()*+,-.\\/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]_abcdefghijklmnopqrstuvwxyz{|}°ÄÖÜäöüß"

  phase_idle: "1"
  phase_listening: "2"
  phase_thinking: "3"
  phase_replying: "4"
  phase_not_ready: "10"
  phase_error: "11"
  phase_muted: "12"
  phase_timer_finished: "20"
  phase_settings: "99"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.5.0
  name_add_mac_suffix: true
  on_boot:
    priority: 600
    then:
      - script.execute: draw_display
      - delay: 15s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: draw_display
  project:
    name: "maheis.esp32-VoiceAssistant"
    version: ${VERSION}

esp32:
  board: esp32s3box
  flash_size: 16MB
  cpu_frequency: 240MHz
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"

psram:
  mode: octal
  speed: 80MHz

api:
  on_client_connected:
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: draw_display
  encryption:
    key: !secret enctryption_key_vaa

ota:
  - platform: esphome
    password: !secret ota_password_vaa
    id: ota_esphome

logger:
  hardware_uart: USB_SERIAL_JTAG

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret wifi_domain
  on_connect:
    - script.execute: draw_display
  on_disconnect:
    - script.execute: draw_display

###

touchscreen:
  - id: gt911_touchscreen
    platform: gt911
    i2c_id: i2c_bus_a
    interrupt_pin:
      number: GPIO3
      ignore_strapping_warning: true

button:
  - id: factory_reset_button
    platform: factory_reset
    internal: true

binary_sensor:
  - id: left_top_button
    platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
      ignore_strapping_warning: true
    internal: true
    on_press:
      - light.toggle: led
  - id: redcircle_button
    platform: gt911
    index: 0
    on_press:
      - if:
          condition:
            lambda: return id(voice_assistant_phase) == ${phase_settings};
          then:
            - lambda: id(voice_assistant_phase) = -1;
            - script.execute: set_idle_or_mute_or_settings_phase
            - script.execute: draw_display
          else:
            - switch.turn_off: timer_ringing
  - id: mute_button
    platform: gpio
    pin:
      number: GPIO1
      mode: INPUT_PULLUP
      inverted: true
    on_state:
      - if:
          condition:
            switch.is_off: mute
          then:
            - switch.turn_on: mute
          else:
            - switch.turn_off: mute
            - button.press: factory_reset_button
  - id: touch_prev_button
    platform: touchscreen
    internal: true
    x_min: 0
    x_max: 50
    y_min: 190
    y_max: 240
    on_press:
      - if:
          condition: 
            lambda: return id(voice_assistant_phase) != ${phase_settings};
          then:
            - lambda: id(voice_assistant_phase) = ${phase_settings};
            - script.execute: draw_display
          else:
            - lambda: id(voice_assistant_phase) = -1;
            - script.execute: set_idle_or_mute_or_settings_phase
            - script.execute: draw_display
  - id: touch_next_button
    platform: touchscreen
    internal: true
    x_min: 270
    x_max: 320
    y_min: 190
    y_max: 240
    on_press:
      - if:
          condition: 
            lambda: return id(voice_assistant_phase) != ${phase_settings};
          then:
            - lambda: id(voice_assistant_phase) = ${phase_settings};
            - script.execute: draw_display
          else:
            - lambda: id(voice_assistant_phase) = -1;
            - script.execute: set_idle_or_mute_or_settings_phase
            - script.execute: draw_display
  - id: touch_vol_down
    platform: touchscreen
    internal: true
    x_min: 75
    x_max: 125
    y_min: 50
    y_max: 100
    on_press:
      then:
        - if:
            condition:
              lambda: return id(voice_assistant_phase) == ${phase_settings};
            then:
              - lambda: |-
                  int volume = round(id(speaker_media_player).volume * 100.0);
                  if (volume > 0) {
                    volume -= 5;
                    if (volume < 0)
                      volume = 0;
                    id(set_volume).execute(volume);
                  }
              - delay: 55ms
              - script.execute: draw_display
  - id: touch_vol_up
    platform: touchscreen
    internal: true
    x_min: 220
    x_max: 270
    y_min: 50
    y_max: 100
    on_press:
      then:
        - if:
            condition:
              lambda: return id(voice_assistant_phase) == ${phase_settings};
            then:
              - lambda: |-
                  int volume = round(id(speaker_media_player).volume * 100.0);
                  if (volume < 100) {
                    volume += 5;
                    if (volume > 100)
                      volume = 100;
                    id(set_volume).execute(volume);
                  }
              - delay: 55ms
              - script.execute: draw_display
  - id: touch_led_down
    platform: touchscreen
    internal: true
    x_min: 75
    x_max: 125
    y_min: 125
    y_max: 175
    on_press:
      then:
        - if:
            condition:
              lambda: return id(voice_assistant_phase) == ${phase_settings};
            then:
              - lambda: |-
                  int brightness = round(id(led).current_values.get_brightness() * 100.0);
                  if (brightness > 10) {
                    brightness -= 10;
                    if (brightness < 10)
                      brightness = 10;
                    id(set_brightness).execute(brightness);
                  }
              - delay: 333ms
              - script.execute: draw_display
  - id: touch_led_up
    platform: touchscreen
    internal: true
    x_min: 220
    x_max: 270
    y_min: 125
    y_max: 175
    on_press:
      then:
        - if:
            condition:
              lambda: return id(voice_assistant_phase) == ${phase_settings};
            then:
              - lambda: |-
                  int brightness = round(id(led).current_values.get_brightness() * 100.0);
                  if (brightness < 100) {
                    brightness += 10;
                    if (brightness > 100)
                      brightness = 100;
                    id(set_brightness).execute(brightness);
                  }
              - delay: 333ms
              - script.execute: draw_display

output:
  - id: backlight_output
    platform: ledc
    pin: GPIO47

light:
  - id: led
    platform: monochromatic
    name: "Screen"
    icon: "mdi:television"
    entity_category: config
    output: backlight_output
    restore_mode: RESTORE_DEFAULT_ON
    default_transition_length: 250ms

i2c:
  - id: i2c_bus_a
    scl: GPIO18
    sda: GPIO8
    scan: false
    sda_pullup_enabled: true
    scl_pullup_enabled: true
    frequency: 100kHz

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin:
      number: GPIO45
      ignore_strapping_warning: true
    i2s_bclk_pin: GPIO17
    i2s_mclk_pin: GPIO2

audio_adc:
  - id: es7210_adc
    platform: es7210
    i2c_id: i2c_bus_a
    bits_per_sample: 16bit
    sample_rate: 16000

audio_dac:
  - id: es8311_dac
    platform: es8311
    i2c_id: i2c_bus_a
    bits_per_sample: 16bit
    sample_rate: 48000

microphone:
  - id: box_mic
    platform: i2s_audio
    sample_rate: 16000
    i2s_din_pin: GPIO16
    bits_per_sample: 16bit
    adc_type: external

speaker:
  - id: box_speaker
    platform: i2s_audio
    i2s_dout_pin: GPIO15
    dac_type: external
    sample_rate: 48000
    bits_per_sample: 16bit
    channel: left
    audio_dac: es8311_dac
    buffer_duration: 100ms

###

time:
  - id: ha_time
    platform: homeassistant
    
###

globals:
  # Global variables for the voice assistant phases
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"
  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${phase_not_ready}
  # Global variables for the display pages
  - id: settings_page_shown
    type: int
    restore_value: false
    initial_value: "0"
  # Global variables for the day/night mode
  - id: day_night_mode
    type: int
    restore_value: false
    initial_value: "0"  # 0 init, 1 day, 2 night
  # Global variables for the timers
  - id: global_first_active_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer_active
    type: bool
    restore_value: false
  - id: global_first_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer
    type: bool
    restore_value: false

image:
  - file: ${image_error}
    id: image_error
    type: RGB
    transparency: alpha_channel
  - file: ${image_error_no_wifi}
    id: image_error_no_wifi
    type: RGB
    transparency: alpha_channel
  - file: ${image_error_no_ha}
    id: image_error_no_ha
    type: RGB
    transparency: alpha_channel
  - file: ${image_idle}
    id: image_idle
    type: RGB
    transparency: alpha_channel
  - file: ${image_listening}
    id: image_listening
    type: RGB
    transparency: alpha_channel
  - file: ${image_loading}
    id: image_loading
    type: RGB
    transparency: alpha_channel
  - file: ${image_muted}
    id: image_muted
    type: RGB
    transparency: alpha_channel
  - file: ${image_replying}
    id: image_replying
    type: RGB
    transparency: alpha_channel
  - file: ${image_settings}
    id: image_settings
    type: RGB
    transparency: alpha_channel
  - file: ${image_thinking}
    id: image_thinking
    type: RGB
    transparency: alpha_channel
  - file: ${image_timer_finished}
    id: image_timer_finished
    type: RGB
    transparency: alpha_channel

font:
  - file:
      type: gfonts
      family: ${font_mono}
      weight: 700
    id: font_time
    size: 127
    glyphs: ${font_allowed_characters}
  - file:
      type: gfonts
      family: ${font_mono}
      weight: 700
    id: font_timer
    size: 70
    glyphs: ${font_allowed_characters}
  - file:
      type: gfonts
      family: ${font_mono}
      weight: 700
    id: font_settings
    size: 50
    glyphs: ${font_allowed_characters}
  - file:
      type: gfonts
      family: ${font_main}
      weight: 300
    id: font_text
    size: 20
    glyphs: ${font_allowed_characters}

color:
  - id: background_dark
    hex: ${background_dark}
  - id: background_light
    hex: ${background_light}
  - id: active_timer_color
    hex: "26ed3a"
  - id: paused_timer_color
    hex: "3b89e3"
  - id: font_color
    hex: ${font_color}

###

media_player:
  - id: speaker_media_player
    platform: speaker
    name: none
    announcement_pipeline:
      speaker: box_speaker
      format: FLAC
      sample_rate: 48000
      num_channels: 1 # S3 Box only has one output channel
    files:
      - id: sound_error
        file: ${sound_error}
      - id: sound_success
        file: ${sound_success}
      - id: sound_timer_finished
        file: ${sound_timer_finished}
      - id: sound_wakeword
        file: ${sound_wakeword}
    on_announcement:
      # Stop the wake word (mWW or VA) if the mic is capturing
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
            # Ensure VA stops before moving on
            - if:
                condition:
                  - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - wait_until:
                      - not:
                          voice_assistant.is_running:
      # Since VA isn't running, this is user-intiated media playback. Draw the mute display
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - lambda: id(voice_assistant_phase) = ${phase_muted};
            - script.execute: draw_display
    on_idle:
      # Since VA isn't running, this is the end of user-intiated media playback. Restart the wake word.
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - script.execute: start_wake_word
            - script.execute: set_idle_or_mute_or_settings_phase
            - script.execute: draw_display

micro_wake_word:
  id: mww
  models:
    - okay_nabu
    - hey_mycroft
    - hey_jarvis
    - alexa
  on_wake_word_detected:
    - voice_assistant.start:
        wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: box_mic
  media_player: speaker_media_player
  micro_wake_word: mww
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  on_listening:
    - text_sensor.template.publish:
        id: text_request
        state: "..."
    - text_sensor.template.publish:
        id: text_response
        state: "..."
    - lambda: id(voice_assistant_phase) = ${phase_listening};
    - script.execute: draw_display
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${phase_thinking};
    - script.execute: draw_display
  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;
    - script.execute: draw_display
  on_tts_start:
    - text_sensor.template.publish:
        id: text_response
        state: !lambda return x;
    - lambda: id(voice_assistant_phase) = ${phase_replying};
    - script.execute: draw_display
  on_end:
    # Wait a short amount of time to see if an announcement starts
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 500ms
    # Announcement is finished and the I2S bus is free
    - wait_until:
        - and:
            - not:
                media_player.is_announcing:
            - not:
                speaker.is_playing:
    # Restart only mWW if enabled; streaming wake words automatically restart
    - if:
        condition:
          - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - micro_wake_word.start:
    - script.execute: set_idle_or_mute_or_settings_phase
    - script.execute: draw_display
    # Clear text sensors
    - text_sensor.template.publish:
        id: text_request
        state: ""
    - text_sensor.template.publish:
        id: text_response
        state: ""
  on_error:
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - lambda: id(voice_assistant_phase) = ${phase_error};
          - script.execute: draw_display
          - media_player.speaker.play_on_device_media_file:
              media_file: sound_error
              announcement: true
          - wait_until:
              condition:
                - not:
                    media_player.is_announcing:
              timeout: 5s
          - script.execute: set_idle_or_mute_or_settings_phase
          - script.execute: draw_display
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - script.execute: start_wake_word
    - script.execute: set_idle_or_mute_or_settings_phase
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: stop_wake_word
    - lambda: id(voice_assistant_phase) = ${phase_not_ready};
    - script.execute: draw_display
  on_timer_started:
    - script.execute: draw_display
  on_timer_cancelled:
    - script.execute: draw_display
  on_timer_updated:
    - script.execute: draw_display
  on_timer_tick:
    - script.execute: draw_display
  on_timer_finished:
    - switch.turn_on: timer_ringing
    - wait_until:
        media_player.is_announcing:
    - lambda: id(voice_assistant_phase) = ${phase_timer_finished};
    - script.execute: draw_display

interval:
  - interval: 60s
    then:
      - lambda: |-
          // Day/Night mode handling
          auto hour = id(ha_time).now().hour;
          int brightness;
          int volume;
          if (hour >= 22 || hour < 7) {
            // Nightmode
            if (id(day_night_mode) != 2) {
              id(day_night_mode) = 2;
              brightness = ${night_brightness};
              volume = ${night_volume};
              id(set_brightness).execute(brightness);
              id(set_volume).execute(volume);
            }
          } else {
            // Daymode
            if (id(day_night_mode) != 1) {
              id(day_night_mode) = 1;
              brightness = ${day_brightness};
              volume = ${day_volume};
              id(set_brightness).execute(brightness);
              id(set_volume).execute(volume);
            }
          }
          // Reset Settings page shown variable
          if(id(voice_assistant_phase) == ${phase_settings}) {
            id(settings_page_shown) = 1;
          }
          if (id(settings_page_shown) == 1) {
            id(settings_page_shown) = 0;
            id(voice_assistant_phase) = -1;
          }
      - script.execute: set_idle_or_mute_or_settings_phase
      - script.execute: draw_display

script:
  - id: draw_display
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - lambda: |
                            switch(id(voice_assistant_phase)) {
                              case ${phase_listening}:
                                id(s3_box_lcd).show_page(listening_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${phase_thinking}:
                                id(s3_box_lcd).show_page(thinking_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${phase_replying}:
                                id(s3_box_lcd).show_page(replying_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${phase_error}:
                                id(s3_box_lcd).show_page(error_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${phase_muted}:
                                id(s3_box_lcd).show_page(muted_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${phase_not_ready}:
                                id(s3_box_lcd).show_page(no_ha_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${phase_timer_finished}:
                                id(s3_box_lcd).show_page(timer_finished_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${phase_settings}:
                                id(s3_box_lcd).show_page(settings_page);
                                id(s3_box_lcd).update();
                                break;
                              default:
                                id(s3_box_lcd).show_page(idle_page);
                                id(s3_box_lcd).update();
                            }
                      else:
                        - display.page.show: no_ha_page
                        - component.update: s3_box_lcd
                else:
                  - display.page.show: no_wifi_page
                  - component.update: s3_box_lcd
          else:
            - display.page.show: initializing_page
            - component.update: s3_box_lcd
  # Timer related scripts
  - id: fetch_first_active_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.is_active && iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_active_timer) = output_timer;
  - id: check_if_timers_active
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            for (auto &iterable_timer : timers) {
              if(iterable_timer.second.is_active) {
                output = true;
              }
            }
          }
          id(global_is_timer_active) = output;
  - id: fetch_first_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_timer) = output_timer;
  - id: check_if_timers
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            output = true;
          }
          id(global_is_timer) = output;
  - id: draw_timer_timeline
    then:
      - lambda: |
          id(check_if_timers_active).execute();
          id(check_if_timers).execute();
          if (id(global_is_timer_active)){
            id(fetch_first_active_timer).execute();
            int active_pixels = round( 320 * id(global_first_active_timer).seconds_left / max(id(global_first_active_timer).total_seconds , static_cast<uint32_t>(1)) );
            if (active_pixels > 0){
              id(s3_box_lcd).filled_rectangle(0 , 226 , active_pixels , 13 , id(active_timer_color) );
            }
          } else if (id(global_is_timer)){
            id(fetch_first_timer).execute();
            int active_pixels = round( 320 * id(global_first_timer).seconds_left / max(id(global_first_timer).total_seconds , static_cast<uint32_t>(1)));
            if (active_pixels > 0){
              id(s3_box_lcd).filled_rectangle(0 , 226 , active_pixels , 13 , id(paused_timer_color) );
            }
          }
  - id: draw_active_timer_widget
    then:
      - lambda: |
          id(check_if_timers_active).execute();
          if (id(global_is_timer_active)){
            id(fetch_first_active_timer).execute();
            int hours_left = floor(id(global_first_active_timer).seconds_left / 3600);
            int minutes_left = floor((id(global_first_active_timer).seconds_left - hours_left * 3600) / 60);
            int seconds_left = id(global_first_active_timer).seconds_left - hours_left * 3600 - minutes_left * 60 ;
            auto display_hours = (hours_left < 10 ? "0" : "") + std::to_string(hours_left);
            auto display_minute = (minutes_left < 10 ? "0" : "") + std::to_string(minutes_left);
            auto display_seconds = (seconds_left  < 10 ? "0" : "") + std::to_string(seconds_left) ;

            std::string display_string = "";
            if (hours_left > 0) {
              display_string = display_hours + ":" + display_minute;
            } else {
              display_string = display_minute + ":" + display_seconds;
            }
            id(s3_box_lcd).printf((320/2), 170, id(font_timer), id(font_color), TextAlign::TOP_CENTER, "%s", display_string.c_str());
          }
  # Starts either mWW or the streaming wake word, depending on the configured location
  - id: start_wake_word
    then:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - micro_wake_word.start:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
  # Stops either mWW or the streaming wake word, depending on the configured location
  - id: stop_wake_word
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - micro_wake_word.stop:
  # Set the voice assistant phase to idle or muted, depending on if the software mute switch is activated
  - id: set_idle_or_mute_or_settings_phase
    then:
      - if:
          condition:
            lambda: return id(voice_assistant_phase) != ${phase_settings};
          then:
            - if:
                condition:
                  switch.is_off: mute
                then:
                  - lambda: id(voice_assistant_phase) = ${phase_idle};
                else:
                  - lambda: id(voice_assistant_phase) = ${phase_muted};
  # Set the volume and brightness of the device
  - id: set_volume
    parameters:
      volume: float
    then:
      - media_player.volume_set: !lambda 'return volume / 100.0;'
  - id: set_brightness
    parameters:
      brightness: float
    then:
      - light.turn_on:
          id: led
          brightness: !lambda 'return brightness / 100.0;'

switch:
  - id: speaker_enable
    platform: gpio
    name: Speaker Enable
    pin:
      number: GPIO46
      ignore_strapping_warning: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    disabled_by_default: true
  - id: mute
    platform: template
    name: Mute
    icon: "mdi:microphone-off"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - microphone.unmute:
      - lambda: id(voice_assistant_phase) = ${phase_idle};
      - script.execute: draw_display
    on_turn_on:
      - microphone.mute:
      - lambda: id(voice_assistant_phase) = ${phase_muted};
      - script.execute: draw_display
  - id: timer_ringing
    platform: template
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      # Turn off the repeat mode and disable the pause between playlist items
      - lambda: |-
          id(speaker_media_player)
            ->make_call()
            .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
            .set_announcement(true)
            .perform();
          id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      # Stop playing the alarm
      - media_player.stop:
          announcement: true
    on_turn_on:
      # Turn on the repeat mode and pause for 1000 ms between playlist items/repeats
      - lambda: |-
          id(speaker_media_player)
            ->make_call()
            .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
            .set_announcement(true)
            .perform();
          id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: sound_timer_finished
          announcement: true
      - delay: 35s
      - switch.turn_off: timer_ringing

select:
  - id: wake_word_engine_location
    platform: template
    entity_category: config
    name: Wake word engine location
    icon: "mdi:account-voice"
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - wait_until:
                lambda: return id(voice_assistant_phase) == ${phase_muted} || id(voice_assistant_phase) == ${phase_idle};
            - if:
                condition:
                  lambda: return x == "In Home Assistant";
                then:
                  - micro_wake_word.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - lambda: id(va).set_use_wake_word(true);
                        - voice_assistant.start_continuous:
            - if:
                condition:
                  lambda: return x == "On device";
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - voice_assistant.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - micro_wake_word.start

text_sensor:
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>32) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_request).state = (truncated+"...").c_str();
        }
  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>32) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

spi:
  # Component display.ili9xxx requires component spi
  - id: spi_bus
    clk_pin: 7
    mosi_pin: 6

display:
  - id: s3_box_lcd
    platform: ili9xxx
    model: S3BOX
    invert_colors: false
    data_rate: 40MHz
    cs_pin: 5
    dc_pin: 4
    reset_pin:
      number: 48
      inverted: true
    update_interval: never
    pages:
      - id: idle_page
        lambda: |-
          it.fill(id(background_dark));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(image_idle), ImageAlign::CENTER);

          it.strftime((320 / 2), -10, id(font_time), id(font_color), TextAlign::TOP_CENTER, "%H:%M", id(ha_time).now());

          id(draw_active_timer_widget).execute();
          id(draw_timer_timeline).execute();
      - id: listening_page
        lambda: |-
          it.fill(id(background_light));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(image_listening), ImageAlign::CENTER);

          id(draw_timer_timeline).execute();
      - id: thinking_page
        lambda: |-
          it.fill(id(background_light));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(image_thinking), ImageAlign::CENTER);

          id(draw_timer_timeline).execute();
      - id: replying_page
        lambda: |-
          it.fill(id(background_light));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(image_replying), ImageAlign::CENTER);

          it.printf((320 / 2), 25, id(font_text), id(font_color), TextAlign::TOP_CENTER, "%s", id(text_request).state.c_str());
          it.printf((320 / 2), 195, id(font_text), id(font_color), TextAlign::TOP_CENTER, "%s", id(text_response).state.c_str());

          id(draw_timer_timeline).execute();
      - id: timer_finished_page
        lambda: |-
          it.fill(id(background_dark));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(image_timer_finished), ImageAlign::CENTER);
      - id: error_page
        lambda: |-
          it.fill(id(background_dark));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(image_error), ImageAlign::CENTER);

          id(draw_timer_timeline).execute();
      - id: no_ha_page
        lambda: |-
          it.fill(id(background_dark));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(image_error_no_ha), ImageAlign::CENTER);
      - id: no_wifi_page
        lambda: |-
          it.fill(id(background_dark));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(image_error_no_wifi), ImageAlign::CENTER);
      - id: initializing_page
        lambda: |-
          it.fill(id(background_dark));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(image_loading), ImageAlign::CENTER);
      - id: muted_page
        lambda: |-
          it.fill(id(background_dark));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(image_muted), ImageAlign::CENTER);

          it.strftime((320 / 2), -10, id(font_time), id(font_color), TextAlign::TOP_CENTER, "%H:%M", id(ha_time).now());

          id(draw_active_timer_widget).execute();
          id(draw_timer_timeline).execute();
      - id: settings_page
        lambda: |-
          it.fill(id(background_dark));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(image_settings), ImageAlign::CENTER);
          
          it.printf((320 / 2), 0, id(font_settings), id(font_color), TextAlign::TOP_CENTER, "Settings");
          
          int volume = id(speaker_media_player).volume * 100;
          it.printf((320 / 2), 75, id(font_settings), id(font_color), TextAlign::TOP_CENTER, "%i%%", volume);
          
          int brightness = id(led).current_values.get_brightness() * 100;
          it.printf((320 / 2), 150, id(font_settings), id(font_color), TextAlign::TOP_CENTER, "%i%%", brightness);
          
          id(draw_timer_timeline).execute();
